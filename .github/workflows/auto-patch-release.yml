name: Auto Patch Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next a.b.c.d version
        id: semver
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Fetch the latest non-draft, non-prerelease release
          http_code=$(mktemp)
          body=$(curl -sS \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -w "%{http_code}" \
            "https://api.github.com/repos/${GH_REPO}/releases/latest" \
            -o response.json)
          status="${body:(-3)}" || true

          if [ "${status}" = "404" ]; then
            # No releases yet
            tag_raw="0.0.0.0"
          else
            tag_raw="$(jq -r '.tag_name // empty' response.json)"
            if [ -z "${tag_raw}" ] || [ "${tag_raw}" = "null" ]; then
              tag_raw="0.0.0.0"
            fi
          fi

          # Preserve leading 'v' if present
          if [[ "${tag_raw}" =~ ^v(.+)$ ]]; then
            prefix="v"
            base="${BASH_REMATCH[1]}"
          else
            prefix=""
            base="${tag_raw}"
          fi

          # Expect a.b.c.d
          if [[ ! "${base}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            echo "Latest tag '${tag_raw}' is not in a.b.c.d format" >&2
            exit 1
          fi

          A="${BASH_REMATCH[1]}"
          B="${BASH_REMATCH[2]}"
          C="${BASH_REMATCH[3]}"
          D="${BASH_REMATCH[4]}"

          NEXT_D=$((D + 1))
          next="${A}.${B}.${C}.${NEXT_D}"
          next_tag="${prefix}${next}"
          latest="${prefix}${A}.${B}.${C}.${D}"

          echo "latest=${latest}"     >> "$GITHUB_OUTPUT"
          echo "next=${next}"         >> "$GITHUB_OUTPUT"
          echo "next_tag=${next_tag}" >> "$GITHUB_OUTPUT"

          echo "Latest: ${latest}"
          echo "Next:   ${next_tag}"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.semver.outputs.next_tag }}
          name: Release ${{ steps.semver.outputs.next }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: |
            VoidFletcher-SemiStrict-POE2.filter
            Update-VoidFletcher-Loot-Filters.bat
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
